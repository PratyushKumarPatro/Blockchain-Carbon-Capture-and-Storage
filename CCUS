pragma solidity = 0.6.0;

contract Registration {
    address public Regulatory_Authority;  // 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
    
    
    mapping(address => bool) public PowerPlant; //0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2
    mapping(address => bool) public CO2_Capture_Facility_Provider; //0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db
    mapping(address=> bool) public CO2_Transporter; //0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB
    mapping(address => bool) public CO2_Storage_Facility_Provider; // 0x617F2E2fD72FD9D5503197092aC168c91465E7f2
    mapping(address => bool) public CO2_Buyer; //0x17F6AD8Ef982297579C203069C1DbfFE4348c372
      
    modifier onlyRegulatory_Authority {
        require(msg.sender == Regulatory_Authority, "Sender not authorized.");
        _;
    }   
    
    constructor() public{
        Regulatory_Authority = msg.sender;
    }
    
    function registerPowerPlant(address p) external onlyRegulatory_Authority {
        require(!PowerPlant[p], "PowerPlant exists already");
        PowerPlant[p] = true;
    }
    
    function registerCO2_Capture_Facility_Provider(address c) external onlyRegulatory_Authority {
        require(!CO2_Capture_Facility_Provider[c], "CO2_Capture_Facility_Provider exists already");
        CO2_Capture_Facility_Provider[c] = true;
    }
    
    function registerCO2_Transporter(address t) external onlyRegulatory_Authority {
        require(!CO2_Transporter[t], "CO2_Transporter exists already");
        CO2_Transporter[t] = true;
    }

    function registerCO2_Storage_Facility_Provider(address s) external onlyRegulatory_Authority {
        require(!CO2_Storage_Facility_Provider[s], "CO2_Storage_Facility_Provider exists already");
        CO2_Storage_Facility_Provider[s] = true;
    }
    
    function registerCO2_Buyer(address b) external onlyRegulatory_Authority {
        require(!CO2_Buyer[b], "CO2_Buyer exists already");
        CO2_Buyer[b] = true;
    }

    
    function isRegulatory_Authority(address r) public view returns(bool) {
        return (Regulatory_Authority == r);
    }
    
    function PowerPlantExists(address p) public view returns(bool) {
        return PowerPlant[p];
    }
    
    function CO2_Capture_Facility_ProviderExists(address c) public view returns(bool) {
        return CO2_Capture_Facility_Provider[c];
    }
    
    function CO2_TransporterExists(address t) public view returns(bool) {
        return CO2_Transporter[t];
    }

    function CO2_Storage_Facility_ProviderExists(address f) public view returns(bool) {
        return CO2_Storage_Facility_Provider[f];
    }
    function CO2_BuyerExists(address b) public view returns(bool) {
        return CO2_Buyer[b];
    }
}

contract CCUS{
    uint256 totalCO2Emitted;
    uint256 totalCO2Leakage;
    uint256 totalCO2Remain;
    address payable public powerplant;
    Registration public registrationContract;

    constructor(address registration) public {
        registrationContract = Registration(registration);
        
        require(registrationContract.PowerPlantExists(msg.sender), "Sender not authorized");
        powerplant = payable(msg.sender);
    }
    modifier onlyPowerPlant {
        require(registrationContract.PowerPlantExists(msg.sender), "Sender not authorized");
        _;
    }
     modifier onlyCO2_Capture_Facility_Provider {
        require(registrationContract.CO2_Capture_Facility_ProviderExists(msg.sender), "Sender not authorized");
        _;
    }
    modifier onlyCO2_Transporter {
        require(registrationContract.CO2_TransporterExists(msg.sender), "Sender not authorized");
        _;
    }
    modifier onlyCO2_Storage_Facility_Provider {
        require(registrationContract.CO2_Storage_Facility_ProviderExists(msg.sender), "Sender not authorized");
        _;
    }
    modifier onlyCO2_Buyer {
        require(registrationContract.CO2_BuyerExists(msg.sender), "Sender not authorized");
        _;
    }

event TotalCO2emissionsUpdated (string Fuel_Type,uint256 emission_factor, uint256 electricity_Produced, uint256 amount_of_fuel_used,uint256 timestamp, bytes32 blockHash,uint256 totalCO2Emitted);
function updatetotalCO2Emitted (string memory Fuel_Type, uint256 emission_factor, uint256 electricity_Produced, uint256 amount_of_fuel_used) public onlyPowerPlant{

     totalCO2Emitted = amount_of_fuel_used * emission_factor;

emit TotalCO2emissionsUpdated(Fuel_Type, emission_factor, electricity_Produced, amount_of_fuel_used,block.timestamp,blockhash(block.number - 1),totalCO2Emitted);
}

event TotalCO2Captured(uint256 totalCO2Emitted, uint256 totalCO2Leakage, uint256 totalCO2Captured,uint256 timestamp);
function updateTotalCO2Captured (uint256 TotalCO2Emitted, uint256 totalCO2Captured) public onlyCO2_Capture_Facility_Provider {

    totalCO2Leakage = TotalCO2Emitted-totalCO2Captured;

emit TotalCO2Captured (totalCO2Emitted,totalCO2Leakage,totalCO2Captured, block.timestamp);
}

event TotalCO2Transported ( uint256 totalCO2Transported, uint256 Lot_number, uint256 distance_travelled, string transportation_mode, uint256 timestamp);
function updateTotalCO2transported (uint256 totalCO2Transported, uint256 Lot_number, uint256 distance_travelled, string memory transportation_mode) public onlyCO2_Transporter{
emit TotalCO2Transported ( totalCO2Transported, Lot_number,distance_travelled,transportation_mode,block.timestamp );
} 

event TotalCO2Stored (uint256 totalCO2received, uint256 totalCO2stored, uint256 timestamp);
function updateTotalCO2Stored(uint256 totalCO2received, uint256 totalCO2stored) public onlyCO2_Storage_Facility_Provider{

emit  TotalCO2Stored (totalCO2received,totalCO2stored,block.timestamp);
}

event TotalCO2Purchased(uint256 totalCO2Purchased, uint256 totalCO2Remain, uint256 Purchase_Cost_of_CO2, address Buyer_address,uint256 timestamp);
function updateTotalCO2Purchased (uint256 totalCO2Purchased, uint256 totalCO2available, uint256 Purchase_Cost_of_CO2, address Buyer_address) public onlyCO2_Buyer{
    totalCO2Remain= totalCO2available-totalCO2Purchased;

emit TotalCO2Purchased(totalCO2Purchased,totalCO2Remain,Purchase_Cost_of_CO2,Buyer_address,block.timestamp);
} 

}
